package ${package.Controller};

import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import com.qiao.itmc.util.AjaxResult;
import com.qiao.itmc.Jar.PageParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/${table.entityPath}")
public class ${entity}Controller {
    @Autowired
    public ${table.serviceName} ${table.entityPath}Service;

    /**
     * 保存和修改公用的
     * @param ${table.entityPath}  传递的实体
     * @return Ajaxresult转换结果
     */
    @RequestMapping(value="/save${entity}")
    public AjaxResult save${entity}(${entity} ${table.entityPath}){
        try {
            if(${table.entityPath}.getId()!=null){
                    ${table.entityPath}Service.updateById(${table.entityPath});
            }else{
                    ${table.entityPath}Service.save(${table.entityPath});
            }
            return AjaxResult.me();
        } catch (Exception e) {
            e.printStackTrace();
            return AjaxResult.me(false,"保存对象失败！"+e.getMessage());
        }
    }

    /**
    * 删除对象信息
    * @param id
    * @return
    */
    @RequestMapping(value="delete/{id}")
    public AjaxResult delete${entity}(@PathVariable("id") Long id){
        try {
                ${table.entityPath}Service.removeById(id);
            return AjaxResult.me();
        } catch (Exception e) {
            e.printStackTrace();
            return AjaxResult.me(false,"删除对象失败！"+e.getMessage());
        }
    }

    //获取用户
    @RequestMapping(value = "find/{id}")
    public ${entity} get${entity}(@PathVariable("id")Long id)
    {
        return ${table.entityPath}Service.getById(id);
    }


    /**
    * 查看所有的员工信息
    * @return
    */
    @RequestMapping(value = "/list${entity}")
    public List<${entity}> list${entity}(){

        return ${table.entityPath}Service.list();
    }
    
    /**
    * 分页查询数据
    *
    * @param query 查询对象
    * @return PageList 分页对象
    */
    @RequestMapping(value = "/pageList${entity}")
    public Page<${entity}> json${entity}(@RequestBody ${entity} query)
    {
        Page<${entity}> page = new Page(query.getPage(),query.getRows());
        return  (Page<${entity}>) ${table.entityPath}Service.page(page);
    }
}