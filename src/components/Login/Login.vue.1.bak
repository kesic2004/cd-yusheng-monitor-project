<template>
  <div>
    <img src="@/assets/login.svg" class="backgroundImageStyle" />
    <!-- class="LoginPageStyle" -->
    <el-form status-icon ref="myForm" label-width="80px" class="LoginPageStyle" :model="loginForm" :rules="loginRules">
      <span style="font-size: 37pt;font-family: Kaiti;display: flex; align-items: center;"><img src="@/assets/logo.png" style="height: 15%;width: 15%;" />气瓶追溯管理</span>
      <el-form-item label="用户名" prop="myKey" style="margin-top: 10px;">
        <el-input type="text" v-model="loginForm.myKey" />
      </el-form-item>
      <el-form-item label="密码" prop="myValue">
        <el-input type="password" v-model="loginForm.myValue" />
      </el-form-item>
      <el-form-item>
        <el-button type="primary" @click="login('myForm')" style="margin-right: 45px;">登录</el-button>
        <el-button type="primary" @click="reset('myForm')" style="margin-left: 45px;">重置</el-button>
      </el-form-item>
    </el-form>
  </div>
</template>

<script>
export default {
  name: 'Login',
  data () {
    return {
      loginForm: {
        myKey: null,
        myValue: null
      },
      loginRules: {
        myKey: [
          {
            required: true,
            message: '用户名是秘填项',
            /**
             * 校验字段的值是否符合提交要求
             * @param {Object} rule 当前对象
             * @param {String} value 用户所输入的值
             * @param {*} callback 校验时所调用的函数，如果校验通过就调用callback()且不传参，如果校验不通过就调用callback(new Error('不通过的理由'))
             */
            validator: (rule, value, callback) => {
              // console.log('myKey')
              // console.log(typeof rule)
              // console.log(typeof value)
              // console.log(typeof callback)
              if (value === null || value.trim().length === 0) {
                callback(new Error('用户名是必填'))
              }
              callback()
            },
            trigger: 'blur'
          }
        ],
        myValue: [
          {
            required: true,
            message: '密码是必填项',
            /**
             * 校验字段的值是否符合提交要求
             * @param {Object} rule 当前对象
             * @param {String} value 用户所输入的值
             * @param {*} callback 校验时所调用的函数，如果校验通过就调用callback()且不传参，如果校验不通过就调用callback(new Error('不通过的理由'))
             */
            validator: (rule, value, callback) => {
              // console.log('myValue')
              // console.log(rule)
              // console.log(value)
              // console.log(callback)
              if (value === null || value.trim().length === 0) {
                callback(new Error('密码是必填项'))
              }
              callback()
            },
            trigger: 'blur'
          }
        ]
      }
    }
  },
  methods: {
    login (formName) {
      this.$refs[formName].validate(valid => {
        if (!valid) {
          return false
        } else {
          this.$axios.post(this.constant.GAS_SERVER_PREFIX + '/authorize/login/checkKeyAndValue', this.loginForm).then(res => {
            // console.log(res.config)
            // console.log(res.data)
            // console.log(res.headers)
            // console.log(res.request)
            // console.log(res.status)
            // console.log(res.statusText)
            console.log(res.status === 200)
            console.log(res.data.success)
            if (res.status === 200 && res.data.success) { /* 双重非（!!）运算符 */
              window.sessionStorage.setItem(this.constant.TOKEN, res.data.result)
              this.$router.push({ path: '/' })
            }
          }).catch(ex => {
            window.sessionStorage.removeItem(this.constant.TOKEN)
          })
          return true
        }
      })
    },
    reset (formName) {
      this.loginForm.myKey = null
      this.loginForm.myValue = null
    }
  }
}
</script>
<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
/* 背景图片 */
.backgroundImageStyle {
  position: absolute; /* 绝对坐标 */
  left: 0; /* X起始坐标 */
  top: 0; /* Y起始坐标 */
  width: 100%;
  height: 100%;
  overflow-x: hidden;
  overflow-y: hidden;
}
/* 登录表单 */
.LoginPageStyle {
  /* position: relative; */
  /* left: calc(30%); */
  /* top: calc(30%); */
  /* right: calc(70%); */
  /* bottom: calc(70%); */
  /* background-color: black; */
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.5); /* 让登录框增加阴影 */
  border-radius: 8px; /* 增加登录框的圆弧角 */
  width: 400px;
  max-width: 100%;
  padding: 0px 35px 0; /* 内边距 */
  margin: auto;
  position: absolute; /* 绝对位置 */
  top: 50%;
  left: 50%;
  margin: -160px 0 0 -160px;
  /* ———————————————— */
  /* 版权声明：本文为CSDN博主「聪明不喝牛奶」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。 */
  /* 原文链接：https://blog.csdn.net/ppphill_c/article/details/118763631 */
}
</style>
